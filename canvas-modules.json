{"":"var Rect = this.load('Rect');\n\nRect.prototype.fill = function (ctx) {\n    return ctx.fillRect(this.x, this.y, this.w, this.h);\n};\n\nreturn function (ctx) {\n    \n    var r = new Rect(0,0,this.width(), this.height());\n    ctx.fillStyle = '#222';\n    r.fill(ctx);\n\n    ctx.fillStyle = 'hsla(70, 100%, 50%, 0.08)';\n    r.inset(20).fill(ctx);\n\n    return false;\n\n    \n}.bind(this);\n","Rect":"var Vector = this.load('Vector');\n\nvar Rect = function (x, y, w, h) {\n    this.x = x; \n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this._ts = Vector.unit;\n    this._to = Vector.zero;\n};\nRect.prototype.rect = Vector.vectorizeArgs(function (o, d) {\n    o = this._ts.mul(o).add(this._to);\n    d = this._ts.mul(d);\n    return new Rect(o.x, o.y, d.x, d.y);\n});\nRect.prototype._d = function () {\n    return this._ts.inv().mul(this.w, this.h);\n};\nRect.prototype._o = function () {\n    return this._to.sub(this.x, this.y).neg().div(this._ts);\n};\nRect.prototype.delta  = Vector.vectorizeArgs(function (dO, dD) {\n    return this.rect(this._o().add(dO), this._d().add(dD));    \n});\nRect.prototype.edges = function (l, t, r, b) {\n    return this.delta(-l, -t, l + r, t + b);\n};\nRect.prototype.inset = function (i) {\n    return this.edges(-i, -i, -i, -i);\n};\nRect.prototype.outset = function (o) {\n    return this.edges(o,o,o,o);\n};\nRect.prototype.part = Vector.vectorizeArgs(function (o, d) {\n    o = o.pairwise(function (a, b) {\n        return a > 0 ? Math.min(a, b) : Math.max(a + b, 0);\n    }, this._d());\n    d = d.pairwise(function (a, b) {\n        return a >= 0 ? Math.min(a, b) : Math.max(a + b, 0);\n    }, this._d());\n    return this.rect(this._o().add(o), d);\n});\nRect.prototype.left    = function (z) { return this.part(0,0,z,0); };\nRect.prototype.right   = function (z) { return this.part(-z,0,z,0); };\nRect.prototype.top     = function (z) { return this.part(0,0,0,z); };\nRect.prototype.bottom  = function (z) { return this.part(0,-z,0,z); };\nRect.prototype.rleft   = function (z) { return this.part(z,0,-z,0); };\nRect.prototype.rright  = function (z) { return this.part(0,0,-z,0); };\nRect.prototype.rtop    = function (z) { return this.part(0,z,0,-z); };\nRect.prototype.rbottom = function (z) { return this.part(0,0,0,-z); };\n\n\n\n\nreturn Rect;","Vector":"\nvar Vector = function (x, y) {\n    if (!(this instanceof Vector)) {\n        return new Vector(x, y);\n    }\n    this.x = x;\n    this.y = y;\n};\n\nVector.vectorizeArgs  = (function () {\n    var pairArgs = function () {\n        var i = 0, args = [];\n        if (arguments[0] instanceof Vector){\n            return arguments;\n        }\n        while (i < arguments.length - 1) {\n            args.push(new Vector(arguments[i++], arguments[i++]));\n        }\n        return args;\n    };\n    return function (fn) {\n        return function () {\n            return fn.apply(this, pairArgs.apply(null, arguments));\n        };\n    };\n})();\n\nVector.prototype = {\n    pairwise: function (fn, v) {\n        return new Vector(fn(this.x, v.x), fn(this.y, v.y));\n    },\n    neg: function () { return Vector.zero.sub(this); },\n    inv: function () { return Vector.unit.div(this); },\n    eq:  Vector.vectorizeArgs(function (v) {\n        return this.x === v.x && this.y === v.y;\n    })\n};\n(function (ops) {\n    Object.keys(ops).forEach(function (n) {\n        Vector.prototype[n] = Vector.vectorizeArgs(function (v) {\n            return this.pairwise(ops[n], v);\n        });\n    });\n})({\n    add: function (a, b) { return a + b; },\n    sub: function (a, b) { return a - b; },\n    mul: function (a, b) { return a * b; },\n    div: function (a, b) { return a / b; },\n});\n\nVector.unit = new Vector(1, 1);\nVector.zero = new Vector(0, 0);\n\nreturn Vector;","animate":"\n        var animate = (function () {\n          var animation = null;\n          return function (ctx, drawer, error) {\n            animation && window.cancelAnimationFrame(animation);\n            animation = window.requestAnimationFrame(function drawLoop (time) {\n              try {\n                if (!drawer(ctx, time)) return true; //break animation if drawer doesnt return truthy value.\n                animation  = window.requestAnimationFrame(drawLoop);\n              } catch(e) {\n                return error(e);\n              }\n            });\n          };\n        })();\n","canvas":"/*\nvar canvas = document.querySelector('#canvas');\nvar canvasPane = document.querySelector('#canvas-pane');\n\nvar canvasSize = (function (canvas, canvasPane) {\n  var autoResize = true;\n  var fix = function (w, h) {\n    autoResize = false;\n    canvas.width = w;\n    canvas.height = h;\n    canvas.style.width = w + 'px';\n    canvas.style.height = h + 'px';\n    canvasPane.style.overflow = 'scroll';\n  };\n  var unfix = function () {\n    autoResize = true;\n    canvas.width = canvasPane.offsetWidth;\n    canvas.height = canvasPane.offsetHeight;\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    canvasPane.style.overflow = 'hidden';\n  };\n  var onResize = function (ev) {\n    if (!autoResize) return;\n    unfix();\n  };\n  return {\n    fix: fix,\n    unfix: unfix\n  };\n})(canvas, canvasPane);\ncanvasSize.unfix();\n\n\n        var canvasRunner = (function (animate, canvas, canvasSize, Runner) {\n          runner = new Runner({\n            setSize: function (w, h) {\n              if (!w || !h) {\n                canvasSize.unfix()\n              }\n              canvasSize.fix(w, h);\n            },\n            width: function () {\n              return canvas.width;\n            },\n            height: function () {\n              return canvas.height;\n            }\n          });\n          return function (code) {\n            var ctx = canvas.getContext('2d');\n            var error = function (err) {\n              canvasSize.fix(5000,5000);\n              ctx.fillStyle = '#555';\n              ctx.fillRect(0,0, canvas.width, canvas.height);\n              ctx.fillStyle = '#fff';\n              ctx.font = '16px monospace';\n              y = 0;\n              err.stack.split('\\n').forEach(function (line) {\n                y+=20;\n                ctx.fillText(line, 20, y);\n              });\n              console.log(err);\n            }\n            canvasSize.unfix();\n            try {\n              var drawer = runner.run(code);\n            } catch (e) {\n              return error(e);\n            }\n            if (typeof drawer === 'function') {\n              animate(ctx, drawer, error);\n            }\n          }\n        })(animate, canvas, canvasSize, Runner);\n*/\n\n\nvar canvas = document.querySelector('canvas');\nreturn {\n    width: function () { return canvas.width; },\n    height: function () { return canvas.height; },\n    context: function () { return canvas.getContext('2d'); }\n};\n","testRect":"var Rect = this.load('Rect');\nvar canvas = this.load('canvas');\n\nRect.prototype.fill = function (ctx) {\n    return ctx.fillRect(this.x, this.y, this.w, this.h);\n};\n\n\n\nvar ctx = canvas.context();\n\n\nvar r = new Rect(0,0, canvas.width(), canvas.height());\nctx.fillStyle = '#222';\nr.fill(ctx);\nctx.fillStyle = 'hsla(70, 100%, 50%, 0.08)';\nr.inset(20).fill(ctx);\nvar rr = r.left(20);\nconsole.log(rr);\n"}